"use client"

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { processarArquivoExcel, Pessoa, ErroLinha, ResultadoProcessamento, gerarHTMLCertificado, prepararDadosCertificado, sanitizarNome } from '@/lib/certificate-generator'
import { gerarPDFCompleto, criarZIPComPDFs, downloadBlob, PDFData } from '@/lib/pdf-generator'
// Remover: import { adicionarCertificado } from '@/app/api/verificar-certificado/route'
import ProgressBar from '@/components/progress-bar'
import { AlertCircle, CheckCircle, XCircle, Upload, FileText, LogOut, Download, FileArchive, UserPlus } from "lucide-react"
import { useRef } from 'react'
import QRCode from 'qrcode'

// Definir tipo Usuario localmente
interface Usuario {
  id: string
  nome: string
  email: string
  chave_de_acesso: string
  funcao?: string
}

interface DashboardProps {
  usuario: Usuario
  onLogout: () => void
}

interface CertificadoResultado {
  nome: string
  sucesso: boolean
  erro?: string
  linha?: number
}

interface ResultadoGeracao {
  sucessos: number
  erros: number
  tempoTotal: string
  tempoMedio: string
}

interface Progresso {
  atual: number
  total: number
  mensagem: string
}

export default function Dashboard({ usuario, onLogout }: DashboardProps) {
  const router = useRouter()
  const [arquivoImportado, setArquivoImportado] = useState<File | null>(null)
  const [loading, setLoading] = useState(false)
  const [pessoas, setPessoas] = useState<Pessoa[]>([])
  const [certificadosGerados, setCertificadosGerados] = useState<CertificadoResultado[]>([])
  const [progresso, setProgresso] = useState<Progresso>({ atual: 0, total: 0, mensagem: '' })
  const [errosValidacao, setErrosValidacao] = useState<any[]>([]) // Changed to any[] as ErroLinha is removed
  const [resultadoGeracao, setResultadoGeracao] = useState<ResultadoGeracao | null>(null)
  const uploadFormRef = useRef<HTMLFormElement>(null)
  const [uploading, setUploading] = useState(false)
  const [uploadResult, setUploadResult] = useState<string | null>(null)
  const [modoCorrecao, setModoCorrecao] = useState(false)
  const [idCorrecao, setIdCorrecao] = useState('')

  const formatarTempo = (segundos: number): string => {
    const horas = Math.floor(segundos / 3600)
    const minutos = Math.floor((segundos % 3600) / 60)
    const segs = Math.floor(segundos % 60)
    const milissegundos = Math.floor((segundos % 1) * 1000)
    
    if (horas > 0) {
      return `${horas}h ${minutos}m ${segs}s`
    } else if (minutos > 0) {
      return `${minutos}m ${segs}s`
    } else if (segs > 0) {
      return `${segs}s ${milissegundos}ms`
    } else {
      return `${milissegundos}ms`
    }
  }

  const handleCadastrarUsuario = () => {
    console.log("üîò Bot√£o 'Cadastrar Usu√°rio' clicado")
    console.log("üë§ Usu√°rio atual:", usuario.nome)
    console.log("üîë Fun√ß√£o do usu√°rio:", usuario.funcao)
    console.log("üîÑ Redirecionando para /cadastrar-usuario...")
    router.push('/cadastrar-usuario')
  }

  const handleImportarArquivo = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const arquivo = event.target.files?.[0]
    if (!arquivo) return

    setArquivoImportado(arquivo)
    setLoading(true)
    setErrosValidacao([])

    try {
      //console.log(`üìÅ Processando arquivo: ${arquivo.name}`)
      
      const resultado: ResultadoProcessamento = await processarArquivoExcel(arquivo)
      
      setPessoas(resultado.pessoas)
      setErrosValidacao(resultado.erros)
      
      console.log(`‚úÖ Processamento conclu√≠do: ${resultado.pessoas.length} registros v√°lidos`)
      if (resultado.erros.length > 0) {
        console.log(`‚ö†Ô∏è Encontrados ${resultado.erros.length} erros de valida√ß√£o`)
      }
      
      // Log dos primeiros e √∫ltimos registros para debug
      if (resultado.pessoas.length > 0) {
        console.log(`üìä Primeiro registro: ${resultado.pessoas[0].ALUNO} - ${resultado.pessoas[0].TREINAMENTO}`)
        console.log(`üìä √öltimo registro: ${resultado.pessoas[resultado.pessoas.length - 1].ALUNO} - ${resultado.pessoas[resultado.pessoas.length - 1].TREINAMENTO}`)
      }
      
    } catch (error) {
      console.error('Erro ao processar arquivo:', error)
      alert('Erro ao processar arquivo Excel')
    } finally {
      setLoading(false)
    }
  }

  const handleGerarCertificados = async () => {
    if (!arquivoImportado || pessoas.length === 0) return

    // Valida√ß√£o do modo corre√ß√£o
    if (modoCorrecao && !idCorrecao.trim()) {
      alert('Por favor, forne√ßa o ID da planilha que deseja corrigir. Apenas o registro da planilha com este ID ser√° processado.')
      return
    }

    // Valida√ß√£o adicional: verificar se o ID existe na planilha
    if (modoCorrecao) {
      const idExisteNaPlanilha = pessoas.some(pessoa => String(pessoa.ID).trim() === String(idCorrecao).trim())
      if (!idExisteNaPlanilha) {
        alert(`ID "${idCorrecao}" n√£o encontrado na planilha. Verifique se o ID est√° correto.`)
        return
      }
      console.log(`üîß Modo corre√ß√£o ativado para ID: "${idCorrecao}"`)
    }

    setLoading(true)
    const certificadosCriados: CertificadoResultado[] = []
    const pdfDataArray: PDFData[] = []
    const startTime = performance.now()
    
    // Mapa para controlar nomes duplicados
    const pessoasProcessadas = new Map<string, number>()

    try {
      // Inicializa progresso
      setProgresso({ atual: 0, total: pessoas.length, mensagem: 'Carregando templates...' })
      
      // Carrega os templates em paralelo
      const [templateFrenteResponse, templateVersoResponse] = await Promise.all([
        fetch('/template-frente.html'),
        fetch('/template-verso.html')
      ])
      
      if (!templateFrenteResponse.ok || !templateVersoResponse.ok) {
        throw new Error('Erro ao carregar templates')
      }
      
      const templateFrente = await templateFrenteResponse.text()
      const templateVerso = await templateVersoResponse.text()

      // Processa certificados em lotes para melhor performance
      const BATCH_SIZE = 3 // Processa 3 certificados por vez
      
      for (let i = 0; i < pessoas.length; i += BATCH_SIZE) {
        const batch = pessoas.slice(i, i + BATCH_SIZE)
        
        // Atualiza progresso
        setProgresso({ 
          atual: i + 1, 
          total: pessoas.length, 
          mensagem: `Processando lote ${Math.floor(i / BATCH_SIZE) + 1}...` 
        })
        
        // Processa o lote em paralelo
        const batchPromises = batch.map(async (pessoa, batchIndex) => {
          const globalIndex = i + batchIndex
          const linhaReal = globalIndex + 1 // Linha real na planilha (considerando que come√ßamos do √≠ndice 0)
          const nome = pessoa.ALUNO || 'Sem Nome'
          const documento = pessoa.DOCUMENTO || ''
          const planilhaId = pessoa.ID || ''
          
          // Usa a fun√ß√£o sanitizarNome com controle de duplicatas usando documento
          const nomeSanitizado = sanitizarNome(nome, documento, pessoasProcessadas)
          
          // Se est√° no modo corre√ß√£o, s√≥ processa o registro com o ID especificado
          if (modoCorrecao && String(planilhaId).trim() !== String(idCorrecao).trim()) {
            console.log(`‚è≠Ô∏è Linha ${linhaReal}: Modo corre√ß√£o - pulando registro com ID "${planilhaId}" (n√£o √© o ID "${idCorrecao}" especificado)`)
            return {
              nome: nomeSanitizado,
              certificadoCompleto: new Blob(),
              sucesso: false,
              erro: `Modo corre√ß√£o - ID "${planilhaId}" n√£o corresponde ao ID "${idCorrecao}" especificado`,
              linha: linhaReal,
              skipped: true
            }
          }
          
          // Verifica se √© um registro com "Sem Nome" - n√£o gera certificado
          if (nome === 'Sem Nome' || nome.trim() === '') {
            // console.log(`‚ùå Linha ${linhaReal}: Nome vazio ou "Sem Nome"`)
            return {
              nome: 'Sem Nome',
              certificadoCompleto: new Blob(),
              sucesso: false,
              erro: 'Nome do aluno est√° vazio',
              linha: linhaReal,
              skipped: true
            }
          }
          
          // Verifica outros campos importantes na ordem especificada
          const temNome = pessoa.ALUNO && pessoa.ALUNO.trim() !== ''
          const temDocumento = pessoa.DOCUMENTO && pessoa.DOCUMENTO.trim() !== ''
          const temEmpresa = pessoa.EMPRESA && pessoa.EMPRESA.trim() !== ''
          const temTreinamento = pessoa.TREINAMENTO && pessoa.TREINAMENTO.trim() !== ''
          const temInstrutor = pessoa.INSTRUTOR && pessoa.INSTRUTOR.trim() !== ''
          const temCargaHoraria = pessoa['CARGA HORARIA'] && pessoa['CARGA HORARIA'].toString().trim() !== ''
          const temDataConclusao = pessoa['DATA CONCLUS√ÉO'] && pessoa['DATA CONCLUS√ÉO'].toString().trim() !== ''
          
          // Verifica se h√° campos vazios importantes na ordem especificada
          const errosCampos: string[] = []
          
          // 1. Documento (caso haja e n√£o haja nome)
          if (!temNome && !temDocumento) {
            errosCampos.push('Documento est√° vazio')
          }
          
          // 2. Aluno (caso haja)
          if (!temNome) {
            errosCampos.push('Nome do aluno est√° vazio')
          }
          
          // 3. Outros campos obrigat√≥rios
          if (!temEmpresa) errosCampos.push('Empresa est√° vazia')
          if (!temTreinamento) errosCampos.push('Treinamento est√° vazio')
          if (!temInstrutor) errosCampos.push('Nome do instrutor est√° vazio')
          if (!temCargaHoraria) errosCampos.push('Carga hor√°ria est√° vazia')
          if (!temDataConclusao) errosCampos.push('Data de conclus√£o est√° vazia')
          
          // Se h√° campos vazios importantes, n√£o gera certificado
          if (errosCampos.length > 0) {
            // console.log(`‚ùå Linha ${linhaReal}: Erros de valida√ß√£o - ${errosCampos.join(', ')}`)
            return {
              nome: nome,
              certificadoCompleto: new Blob(),
              sucesso: false,
              erro: errosCampos.join(', '),
              linha: linhaReal,
              skipped: true
            }
          }
          
          // console.log(`‚úÖ Linha ${linhaReal}: Nome sanitizado = "${nomeSanitizado}"`)
          
          try {
            // Primeiro, verifica se o ID j√° existe no banco
            const dadosCertificado = prepararDadosCertificado(pessoa)
            // console.log('üìù Dados do certificado a serem salvos:', dadosCertificado)
            
            // Se estiver no modo corre√ß√£o, verifica se o ID da planilha corresponde ao especificado
            if (modoCorrecao) {
              if (!idCorrecao.trim()) {
                // console.log('‚ùå Modo corre√ß√£o ativo mas ID n√£o fornecido')
                return {
                  nome: nomeSanitizado,
                  certificadoCompleto: new Blob(),
                  sucesso: false,
                  erro: 'ID de corre√ß√£o n√£o fornecido',
                  linha: linhaReal,
                  skipped: true
                }
              }
              // console.log('üîß Modo corre√ß√£o ativo, verificando ID da planilha:', planilhaId)
            }
            
            const response = await fetch('/api/importar-certificados', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                ...(modoCorrecao && { 'x-correcao': 'true' })
              },
              body: JSON.stringify(dadosCertificado),
            })
            
            const result = await response.json()
            // console.log('üìä Documento j√° existia?', result.exists ? 'Sim' : 'N√£o')
            // console.log('üìä Resultado completo da API:', result)
            
            // Verifica se o certificado j√° existe no banco
            if (result.exists && !modoCorrecao) {
              console.log(`‚è≠Ô∏è Linha ${linhaReal}: Certificado j√° existe no banco, pulando gera√ß√£o do PDF`)
              return {
                nome: nomeSanitizado,
                certificadoCompleto: new Blob(),
                sucesso: false,
                erro: 'Certificado j√° existe no banco de dados',
                linha: linhaReal,
                skipped: true
              }
            }
            
            // Verifica se houve erro na API
            if (!result.success) {
              console.log(`‚ùå Linha ${linhaReal}: Erro na API - ${result.error || 'Erro desconhecido'}`)
              return {
                nome: nomeSanitizado,
                certificadoCompleto: new Blob(),
                sucesso: false,
                erro: result.error || 'Erro na API',
                linha: linhaReal,
                skipped: true
              }
            }
            
            // Se est√° no modo corre√ß√£o, sempre gera o PDF (sobrescreve dados)
            if (modoCorrecao) {
              // console.log(`üîß Linha ${linhaReal}: Modo corre√ß√£o - sobrescrevendo dados existentes`)
            } else {
              // console.log(`üÜï Linha ${linhaReal}: Certificado novo, gerando PDF...`)
            }
            
            const firestoreId = result.id // ID do documento no Firestore
            // console.log('üÜî ID do documento no Firestore:', firestoreId)
            
            // Gera QR code com o ID do Firestore
            const urlVerificacao = `${typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000'}/id/${firestoreId}`
            // console.log('üîó URL de verifica√ß√£o:', urlVerificacao)
            const qrCodeDataURL = await QRCode.toDataURL(urlVerificacao)
            
            // Gera HTML da frente com QR code atualizado
            const nome = pessoa.ALUNO || ''
            const doc = pessoa.DOCUMENTO || ''
            const instrutor = pessoa.INSTRUTOR || ''
            const treinamento = pessoa.TREINAMENTO || ''
            const cargaHoraria = pessoa['CARGA HORARIA'] || ''
            const empresa = pessoa.EMPRESA || ''
            
            // Atualiza progresso individual apenas para certificados novos
            setProgresso({ 
              atual: globalIndex + 1, 
              total: pessoas.length, 
              mensagem: `Gerando PDF para: ${nome}` 
            })
            
            const scriptComQR = `
              <script>
                document.getElementById('aluno').textContent = '${nome.replace(/'/g, "\\'")}';
                document.getElementById('documento').textContent = 'DOC: ${doc.replace(/'/g, "\\'")}';
                document.getElementById('treinamento').textContent = '${treinamento.replace(/'/g, "\\'")}';
                document.getElementById('empresa').textContent = '${empresa.replace(/'/g, "\\'")}';
                document.getElementById('cargaHoraria').textContent = '${cargaHoraria} horas';
                document.getElementById('instrutor').textContent = '${instrutor.replace(/'/g, "\\'")}';
                
                // Adiciona QR code com o ID do Firestore
                const qrCodeImg = document.getElementById('qr-code');
                if (qrCodeImg) {
                  qrCodeImg.src = '${qrCodeDataURL}';
                  qrCodeImg.style.display = 'block';
                }
              </script>
            `;
            
            const frenteHTML = templateFrente.replace('</body>', scriptComQR + '</body>')
            
            // Gera HTML do verso
            const dataConclusaoFmt = pessoa['DATA CONCLUS√ÉO'] ? 
              new Date(pessoa['DATA CONCLUS√ÉO']).toLocaleDateString('pt-BR', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
              }) : ''
            
            const scriptVerso = `
              <script>
                document.getElementById('treinamento').textContent = '${pessoa.TREINAMENTO || ''}';
                document.getElementById('cargaHoraria').textContent = '${pessoa['CARGA HORARIA'] || ''} horas';
                document.getElementById('dataConclusao').textContent = '${dataConclusaoFmt}';
              </script>
            `;
            
            const versoHTML = templateVerso.replace('</body>', scriptVerso + '</body>')

            // Gera PDF completo (frente + verso)
            let certificadoCompleto
            try {
              certificadoCompleto = await gerarPDFCompleto(frenteHTML, versoHTML, nomeSanitizado)
              // console.log(`üìÑ PDF gerado para "${nomeSanitizado}" - Tamanho: ${certificadoCompleto.size} bytes`)
            } catch (pdfError) {
              console.error(`‚ùå Erro ao gerar PDF para "${nomeSanitizado}":`, pdfError)
              throw new Error(`Erro na gera√ß√£o do PDF: ${pdfError}`)
            }
            
            return {
              nome: nomeSanitizado,
              certificadoCompleto,
              sucesso: true,
              linha: linhaReal // Adiciona a linha do sucesso
            }
          } catch (error) {
            console.error(`Erro ao gerar certificado para ${nomeSanitizado}:`, error)
            return {
              nome: nomeSanitizado,
              certificadoCompleto: new Blob(),
              sucesso: false,
              erro: error instanceof Error ? error.message : 'Erro desconhecido',
              linha: linhaReal // Adiciona a linha do erro
            }
          }
        })
        
        // Aguarda o lote atual terminar
        const batchResults = await Promise.all(batchPromises)
        
        // Adiciona resultados aos arrays (apenas os que n√£o foram pulados)
        for (const result of batchResults) {
          if (result.sucesso) {
            // console.log(`üéâ Sucesso: "${result.nome}" - PDF gerado`)
            pdfDataArray.push({
              nome: result.nome,
              certificadoCompleto: result.certificadoCompleto
            })
            // console.log(`üì¶ PDF adicionado ao array. Total atual: ${pdfDataArray.length}`)
          } else if (!result.skipped) {
            // console.log(`üí• Falha: "${result.nome}" - ${result.erro}`)
          } else {
            // console.log(`‚è≠Ô∏è Pulado: "${result.nome}" - ${result.erro}`)
          }
          
          certificadosCriados.push({
            nome: result.nome,
            sucesso: result.sucesso,
            erro: result.erro,
            linha: result.linha
          })
        }
      }
      
      // console.log(`üìä RESUMO DO PROCESSAMENTO:`)
      // console.log(`üì¶ PDFs no array: ${pdfDataArray.length}`)
      // console.log(`üìã Certificados processados: ${certificadosCriados.length}`)
      // console.log(`‚úÖ Sucessos: ${certificadosCriados.filter(c => c.sucesso).length}`)
      // console.log(`‚ùå Erros: ${certificadosCriados.filter(c => !c.sucesso && !c.skipped).length}`)
      // console.log(`‚è≠Ô∏è Pulados: ${certificadosCriados.filter(c => c.skipped).length}`)
      
      // Cria arquivo ZIP com todos os PDFs (apenas os bem-sucedidos)
      if (pdfDataArray.length > 0) {
        // console.log(`üóúÔ∏è Criando ZIP com ${pdfDataArray.length} PDFs...`)
        setProgresso({ 
          atual: pessoas.length, 
          total: pessoas.length, 
          mensagem: 'Criando arquivo ZIP...' 
        })
        
        const zipBlob = await criarZIPComPDFs(pdfDataArray)
        
        // Faz download do ZIP
        const dataAtual = new Date().toISOString().split('T')[0]
        downloadBlob(zipBlob, `certificados_${dataAtual}.zip`)
        // console.log(`‚úÖ ZIP criado e baixado com sucesso!`)
        
        // Limpa o campo de corre√ß√£o ap√≥s o download
        if (modoCorrecao) {
          setIdCorrecao('')
          setModoCorrecao(false)
          // console.log('üßπ Campos de corre√ß√£o limpos')
        }
      } else {
        // console.log(`‚ö†Ô∏è Nenhum PDF foi gerado para incluir no ZIP`)
      }
      
      // Calcula estat√≠sticas finais
      const sucessos = certificadosCriados.filter(c => c.sucesso).length
      const erros = certificadosCriados.filter(c => !c.sucesso).length
      const endTime = performance.now()
      const tempoTotal = (endTime - startTime) / 1000
      const tempoMedio = sucessos > 0 ? tempoTotal / sucessos : 0
      
      // console.log(`üìä RESUMO FINAL:`)
      // console.log(`‚úÖ Sucessos: ${sucessos}`)
      // console.log(`‚ùå Erros: ${erros}`)
      // console.log(`‚è±Ô∏è Tempo total: ${tempoTotal.toFixed(2)}s`)
      // console.log(`üìà Tempo m√©dio: ${tempoMedio.toFixed(2)}s`)
      
      setResultadoGeracao({
        sucessos,
        erros,
        tempoTotal: formatarTempo(tempoTotal),
        tempoMedio: formatarTempo(tempoMedio)
      })
      
      setCertificadosGerados(certificadosCriados)
      setProgresso({ atual: 0, total: 0, mensagem: '' })
      
    } catch (error) {
      console.error('Erro ao gerar certificados:', error)
      alert('Erro ao gerar certificados PDF')
    } finally {
      setLoading(false)
    }
  }

  // NOVO: Fun√ß√£o para upload de planilha para o endpoint
  const handleUploadCertificados = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setUploading(true)
    setUploadResult(null)
    const formData = new FormData(uploadFormRef.current!)
    try {
      const res = await fetch('/api/importar-certificados', {
              method: 'POST',
        body: formData,
      })
      const data = await res.json()
      if (data.success) {
        setUploadResult(`Importa√ß√£o conclu√≠da! ${data.ids.length} certificados importados.`)
      } else {
        setUploadResult('Erro ao importar certificados: ' + (data.error || 'Erro desconhecido'))
      }
    } catch (err) {
      setUploadResult('Erro ao importar certificados: ' + (err as any).message)
    } finally {
      setUploading(false)
    }
  }

  const certificadosSucesso = certificadosGerados.filter(c => c.sucesso)
  const certificadosErro = certificadosGerados.filter(c => !c.sucesso)

  return (
    <div className="min-h-screen" style={{ backgroundColor: "#ffffff" }}>
      {/* Navbar fixa no topo */}
      <nav className="fixed top-0 left-0 w-full z-50 shadow border-b border-blue-900" style={{height: 60, backgroundColor: '#06459a'}}>
        <div className="max-w-7xl mx-auto px-4 flex items-center justify-between h-14">
          <div className="flex items-center gap-4">
            <img src="/OwlTechLogo.png" alt="Logo ISP Certificados" className="w-8 h-8 object-contain bg-white rounded-lg" style={{ padding: 2 }} />
            <span className="font-bold text-white text-lg">ISP CERTIFICADOS</span>
          </div>
          <div className="flex items-center gap-6">
            <button
              className="text-white hover:text-blue-200 font-medium transition"
              onClick={() => router.push('/dashboard')}
            >
              Dashboard
            </button>
            <button
              className="text-white hover:text-blue-200 font-medium transition"
              onClick={() => router.push('/alunos')}
            >
              Alunos
            </button>
            <button
              className="text-white hover:text-blue-200 font-medium transition"
              onClick={() => router.push('/relatorios')}
            >
              Relat√≥rios
            </button>
            <button
              className="text-white hover:text-blue-200 font-medium transition"
              onClick={handleCadastrarUsuario}
            >
              Usu√°rios
            </button>
            <button
              className="text-white hover:text-blue-200 font-medium transition"
              onClick={() => router.push('/assinaturas')}
            >
              Assinaturas
            </button>
            <button
              className="text-white hover:text-blue-200 font-medium transition"
              onClick={onLogout}
            >
              Sair
            </button>
          </div>
        </div>
      </nav>
      <div style={{height: 60}} /> {/* Espa√ßo para a navbar fixa */}

      {/* Main Content */}
      <main className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="grid gap-6 md:grid-cols-2">
          {/* Card de Importa√ß√£o */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2" style={{ color: "#06459a" }}>
                <Upload className="h-5 w-5" />
                <span>Importar Arquivo</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="arquivo">Selecione o arquivo para importa√ß√£o</Label>
                <Input id="arquivo" type="file" onChange={handleImportarArquivo} accept=".csv,.xlsx,.xls" />
              </div>
              
              {/* Caixa de sele√ß√£o para modo corre√ß√£o */}
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="modoCorrecao"
                  checked={modoCorrecao}
                  onChange={(e) => setModoCorrecao(e.target.checked)}
                  className="rounded border-gray-300"
                />
                <Label htmlFor="modoCorrecao" className="text-sm font-medium">
                  Corrigir
                </Label>
              </div>
              
              {/* Campo para ID de corre√ß√£o */}
              {modoCorrecao && (
                <div className="space-y-2">
                  <Label htmlFor="idCorrecao">ID da planilha a ser corrigido</Label>
                  <Input
                    id="idCorrecao"
                    type="text"
                    value={idCorrecao}
                    onChange={(e) => setIdCorrecao(e.target.value)}
                    placeholder="Digite o ID da planilha que deseja corrigir"
                    className="w-full"
                  />
                  <div className="text-xs text-blue-600 bg-blue-50 p-2 rounded">
                    <p><strong>Modo Corre√ß√£o Ativo:</strong></p>
                    <ul className="list-disc list-inside mt-1 space-y-1">
                      <li>Apenas o registro com o ID especificado ser√° processado</li>
                      <li>Se o certificado j√° existir no banco, os dados ser√£o atualizados</li>
                      <li>Um novo PDF ser√° gerado com os dados corrigidos</li>
                      <li>Certificados com outros IDs ser√£o ignorados</li>
                    </ul>
                  </div>
                </div>
              )}
              
              {arquivoImportado && (
                <div className="p-3 bg-green-50 border border-green-200 rounded-md">
                  <p className="text-sm text-green-800">
                    <strong>Arquivo selecionado:</strong> {arquivoImportado.name}
                  </p>
                  <p className="text-xs text-green-600">Tamanho: {(arquivoImportado.size / 1024).toFixed(2)} KB</p>
                  {pessoas.length > 0 && (
                    <p className="text-xs text-green-600 mt-1">
                      <strong>{pessoas.length} registros</strong> processados com sucesso
                    </p>
                  )}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Card de Gera√ß√£o */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2" style={{ color: "#06459a" }}>
                <FileArchive className="h-5 w-5" />
                <span>Gerar PDFs</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-sm text-gray-600">
                  Ap√≥s importar o arquivo, clique no bot√£o abaixo para gerar os certificados completos (frente + verso) em PDF e baixar em arquivo ZIP.
                </p>
                {loading && progresso.total > 0 && (
                  <div className="mt-4">
                    <ProgressBar 
                      current={progresso.atual} 
                      total={progresso.total} 
                      message={progresso.mensagem} 
                    />
                  </div>
                )}
                
                <Button
                  onClick={handleGerarCertificados}
                  disabled={!arquivoImportado || pessoas.length === 0 || loading}
                  className="w-full"
                  style={{
                    backgroundColor: arquivoImportado && pessoas.length > 0 ? "#06459a" : "#cccccc",
                    color: "#ffffff",
                  }}
                >
                  {loading ? (
                    <>
                      <FileArchive className="h-4 w-4 mr-2 animate-spin" />
                      Gerando PDFs...
                    </>
                  ) : (
                    <>
                      <FileArchive className="h-4 w-4 mr-2" />
                      Gerar PDFs ({pessoas.length})
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Se√ß√£o de Erros de Valida√ß√£o */}
        {errosValidacao.length > 0 && (
          <Card className="border-red-200 bg-red-50">
            <CardHeader>
              <CardTitle className="text-red-800 flex items-center gap-2">
                <AlertCircle className="h-5 w-5" />
                Erros de Valida√ß√£o na Planilha
              </CardTitle>
              <CardDescription className="text-red-600">
                {errosValidacao.length} linha(s) com dados incompletos foram encontradas
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {errosValidacao.map((erro, index) => (
                  <Alert key={index} className="border-red-300 bg-red-100">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-800">
                      <strong>Linha {erro.linha}:</strong> {erro.erro}
                    </AlertDescription>
                  </Alert>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Se√ß√£o de Resultados da Gera√ß√£o */}
        {resultadoGeracao && (
          <Card className="border-green-200 bg-green-50">
            <CardHeader>
              <CardTitle className="text-green-800 flex items-center gap-2">
                <CheckCircle className="h-5 w-5" />
                Resultado da Gera√ß√£o
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{resultadoGeracao.sucessos}</div>
                  <div className="text-sm text-green-700">Certificados Gerados</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">{resultadoGeracao.erros}</div>
                  <div className="text-sm text-red-700">Erros</div>
                </div>
              </div>
              <Separator className="my-4" />
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="text-sm font-medium text-gray-600">Tempo Total</div>
                  <div className="text-lg font-semibold">{resultadoGeracao.tempoTotal}</div>
                </div>
                <div>
                  <div className="text-sm font-medium text-gray-600">Tempo M√©dio</div>
                  <div className="text-lg font-semibold">{resultadoGeracao.tempoMedio}</div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Lista de Certificados Gerados */}
        {certificadosGerados.filter(c => c.sucesso).length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Certificados Gerados
              </CardTitle>
              <CardDescription>
                {certificadosGerados.filter(c => c.sucesso).length} certificado(s) foram gerados com frente e verso unificados e baixados em arquivo ZIP:
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {certificadosGerados.filter(c => c.sucesso).map((certificado, index) => (
                  <div key={index} className="flex items-center justify-between p-2 rounded bg-green-50 border border-green-200">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-green-800">
                        {certificado.nome}_certificado.pdf
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Informa√ß√µes do Usu√°rio */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle style={{ color: "#06459a" }}>Informa√ß√µes da Conta</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <Label className="text-sm font-medium text-gray-500">Nome</Label>
                <p className="text-sm">{usuario.nome}</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-gray-500">Email</Label>
                <p className="text-sm">{usuario.email}</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-gray-500">Fun√ß√£o</Label>
                <p className="text-sm">{usuario.funcao || "Usu√°rio"}</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-gray-500">Chave de Acesso v√°lida at√©</Label>
                <p className="text-sm">{new Date(usuario.chave_de_acesso).toLocaleDateString("pt-BR")}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}
